// server.js
import dotenv from 'dotenv';
import express from 'express';
import path, { dirname } from 'path';
import { fileURLToPath } from 'url';
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai"; // Adicionado HarmCategory e HarmBlockThreshold

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const port = process.env.PORT || 3000; // Usar vari√°vel de ambiente para porta ou padr√£o 3000

// --- Configura√ß√£o da API do Google ---
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;

if (!GOOGLE_API_KEY) {
    console.error("ERRO: A vari√°vel de ambiente GOOGLE_API_KEY n√£o est√° definida.");
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash-latest", // Ou "gemini-1.5-pro-latest"
    // Adicionando configura√ß√µes de seguran√ßa padr√£o (recomendado)
    safetySettings: [
        { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
        { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
        { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
        { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    ],
    generationConfig: { // Configura√ß√µes de gera√ß√£o padr√£o para novas sess√µes
        // temperature: 0.7, // Exemplo: ajuste a criatividade (0.0 - 1.0)
        maxOutputTokens: 800, // Exemplo: m√°ximo de tokens na resposta
    }
});

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'))); // Para servir o frontend

// --- Gerenciamento de Sess√µes de Chat (em mem√≥ria) ---
// ATEN√á√ÉO: Para produ√ß√£o, use uma solu√ß√£o mais robusta (ex: Redis, DB)
const chatSessions = {}; // { sessionId: ChatSessionInstance }

/**
 * Obt√©m uma sess√£o de chat existente ou cria uma nova.
 * @param {string} sessionId Identificador √∫nico para a sess√£o de chat.
 * @returns {import("@google/generative-ai").ChatSession} O objeto ChatSession.
 */
function getOrCreateChatSession(sessionId) {
    if (!chatSessions[sessionId]) {
        console.log(`[Sess√£o: ${sessionId}] Iniciando nova sess√£o de chat.`);
        // Voc√™ pode iniciar com um hist√≥rico pr√©-definido se quiser
        // Por exemplo, para definir a personalidade do bot:
        // const initialHistory = [
        //   { role: "user", parts: [{ text: "Voc√™ √© um assistente chamado Zippy e voc√™ √© muito entusiasmado." }] },
        //   { role: "model", parts: [{ text: "Entendido! Zippy ao seu dispor com muito entusiasmo! üòÑ Como posso te ajudar hoje?" }] },
        // ];
        chatSessions[sessionId] = model.startChat({
            history: [], // Come√ßa com hist√≥rico vazio ou use initialHistory
            // As generationConfig e safetySettings definidas no 'model' acima ser√£o usadas,
            // a menos que voc√™ queira sobrescrev√™-las aqui para esta sess√£o espec√≠fica.
        });
    } else {
        console.log(`[Sess√£o: ${sessionId}] Continuando sess√£o de chat existente.`);
    }
    return chatSessions[sessionId];
}

// Fun√ß√£o para chamar a API do Google Gemini usando uma sess√£o espec√≠fica
async function getGoogleAIResponse(sessionId, userInput) {
    if (!userInput || userInput.trim() === "") {
        return "Por favor, digite alguma coisa.";
    }

    const chat = getOrCreateChatSession(sessionId); // Usa a sess√£o correta

    try {
        console.log(`[Sess√£o: ${sessionId}] Enviando para Gemini: "${userInput}"`);

        const result = await chat.sendMessage(userInput); // Envia a mensagem na sess√£o existente
        const response = await result.response;
        const botReply = response.text().trim();

        console.log(`[Sess√£o: ${sessionId}] Recebido do Gemini: "${botReply}"`);
        return botReply;

    } catch (error) {
        console.error(`------------------[Sess√£o: ${sessionId}]-------------------`);
        console.error("Erro ao chamar a API do Google AI (Gemini):");
        console.error(error);
        console.error("-----------------------------------------");

        // Tratamento de erro mais espec√≠fico
        if (error.message && error.message.includes("context_length_exceeded")) {
            // Opcional: Tentar limpar o hist√≥rico da sess√£o e avisar o usu√°rio
            // delete chatSessions[sessionId]; // Isso apagaria a sess√£o
            return "ü§ñ Nossa conversa ficou muito longa e o limite de contexto foi atingido. Por favor, tente iniciar uma nova conversa ou resumir o que falamos.";
        }
        if (error.status && error.status === 429) { // Too Many Requests
            return "ü§ñ Estou recebendo muitas perguntas agora. Por favor, tente novamente em alguns instantes.";
        }
        return "ü§ñ Desculpe, n√£o consegui processar sua pergunta com a IA do Google no momento.";
    }
}

// Rota para o chat
app.post('/chat', async (req, res) => {
    const { sessionId, message: userMessage } = req.body; // Espera sessionId e message

    if (!sessionId) {
        return res.status(400).json({ error: 'sessionId √© obrigat√≥rio.', reply: 'ü§ñ Problema na identifica√ß√£o da sess√£o.' });
    }
    if (!userMessage || typeof userMessage !== 'string' || userMessage.trim() === "") {
        return res.status(400).json({ error: 'Mensagem n√£o encontrada ou vazia.', reply: 'ü§ñ Por favor, envie uma mensagem.' });
    }

    const botReply = await getGoogleAIResponse(sessionId, userMessage);
    // Opcional: enviar hist√≥rico de volta se o frontend precisar
    // const currentChat = chatSessions[sessionId];
    // const history = currentChat ? currentChat.history : [];
    // res.json({ reply: botReply, history: history });
    res.json({ reply: botReply });
});

// Rota opcional para limpar/resetar uma sess√£o (√∫til para debug ou se o usu√°rio quiser)
app.post('/clear_session', (req, res) => {
    const { sessionId } = req.body;
    if (sessionId && chatSessions[sessionId]) {
        delete chatSessions[sessionId];
        console.log(`[Sess√£o: ${sessionId}] Sess√£o limpa.`);
        res.json({ message: `Sess√£o ${sessionId} limpa com sucesso.` });
    } else {
        res.status(404).json({ error: "Sess√£o n√£o encontrada ou sessionId n√£o fornecido." });
    }
});


app.listen(port, () => {
    console.log(`Servidor rodando em http://localhost:${port}`);
    console.log(`Acesse o frontend em http://localhost:${port}/ (se voc√™ tiver um index.html em 'public')`);
    if (GOOGLE_API_KEY && !GOOGLE_API_KEY.startsWith('AIzaSy')) { // Verifica√ß√£o de GOOGLE_API_KEY ajustada
        console.warn("AVISO: Sua GOOGLE_API_KEY n√£o parece uma chave v√°lida do Google (geralmente come√ßa com 'AIzaSy'). Verifique se √© a chave correta.");
    } else if (GOOGLE_API_KEY) {
        console.log("Pronto para usar a API do Google AI (Gemini)!");
    }
});